{"ast":null,"code":"import axios from \"axios\";\nclass UserService {\n  constructor() {\n    this.baseURL = 'http://localhost:3000/users';\n    this.token = localStorage.getItem('token') || '';\n    this.header = {\n      headers: {\n        'authorization': `Bearer ${this.token}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n  }\n  async list() {\n    try {\n      const response = await axios.get(this.baseURL, this.header);\n      return response.data.data;\n    } catch (error) {\n      console.error(error);\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\n        this.expirado();\n      }\n      throw error;\n    }\n  }\n  async get(id) {\n    try {\n      const {\n        data\n      } = await axios.get(`${this.baseURL}/${id}`, this.header);\n      return data;\n    } catch (error) {\n      console.error(error);\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\n        this.expirado();\n      }\n      throw error;\n    }\n  }\n  async create(userData) {\n    try {\n      const {\n        data\n      } = await axios.post(`${this.baseURL}/store`, userData, this.header);\n      return data;\n    } catch (error) {\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\n        this.expirado();\n      }\n      throw error;\n    }\n  }\n  async delete(email) {\n    console.log(email);\n    try {\n      const {\n        data: deleteData\n      } = await axios.delete(`${this.baseURL}/delete/${email}`, this.header);\n      return deleteData;\n    } catch (error) {\n      console.error(error);\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\n        this.expirado();\n      }\n      throw error;\n    }\n  }\n  async update(id, data) {\n    if (!id) {\n      console.error(\"ID del usuario no definido\");\n      return;\n    }\n    try {\n      const {\n        data: updatedData\n      } = await axios.put(`${this.baseURL}/${id}`, data, this.header);\n      return updatedData;\n    } catch (error) {\n      console.error(error);\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\n        this.expirado();\n      }\n      throw error;\n    }\n  }\n}\nconst userServiceInstance = new UserService();\nexport default userServiceInstance;","map":{"version":3,"names":["axios","UserService","constructor","baseURL","token","localStorage","getItem","header","headers","list","response","get","data","error","console","status","expirado","id","create","userData","post","delete","email","log","deleteData","update","updatedData","put","userServiceInstance"],"sources":["G:/NUR/test-sps-react/src/services/UserService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nclass UserService {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:3000/users';\r\n    this.token = localStorage.getItem('token') || '';\r\n    this.header = {\r\n      headers: {\r\n        'authorization': `Bearer ${this.token}`,\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json', \r\n      },\r\n    };\r\n  }\r\n  async list() {\r\n    try {\r\n      const response = await axios.get(this.baseURL, this.header); \r\n      return response.data.data;  \r\n    } catch (error) {\r\n      console.error(error);\r\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\r\n        this.expirado();\r\n      }\r\n      throw error; \r\n    }\r\n  }\r\n  async get(id) {\r\n    try {\r\n      const { data } = await axios.get(`${this.baseURL}/${id}`, this.header);\r\n      return data; \r\n    } catch (error) {\r\n      console.error(error);\r\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\r\n        this.expirado();\r\n      }\r\n      throw error; \r\n    }\r\n  }\r\n  async create(userData) {\r\n    try {\r\n      const { data } = await axios.post(`${this.baseURL}/store`, userData, this.header);\r\n      return data;\r\n    } catch (error) {\r\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\r\n        this.expirado();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n  async delete(email) {\r\n    console.log(email);\r\n    try {\r\n      const {  data: deleteData } = await axios.delete(`${this.baseURL}/delete/${email}`, this.header);\r\n      return deleteData; \r\n    } catch (error) {\r\n      console.error(error);\r\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\r\n        this.expirado();\r\n      }\r\n      throw error; \r\n    }\r\n  }\r\n  async update(id, data) {\r\n    if (!id) {\r\n      console.error(\"ID del usuario no definido\");\r\n      return;\r\n    }\r\n   try {\r\n      const { data: updatedData } = await axios.put(`${this.baseURL}/${id}`, data, this.header);\r\n      return updatedData; \r\n    } catch (error) {\r\n      console.error(error);\r\n      if (error.response && (error.response.status === 403 || error.response.status === 401)) {\r\n        this.expirado();\r\n      }\r\n      throw error; \r\n    }\r\n  }\r\n}\r\n\r\nconst userServiceInstance = new UserService();\r\nexport default userServiceInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}